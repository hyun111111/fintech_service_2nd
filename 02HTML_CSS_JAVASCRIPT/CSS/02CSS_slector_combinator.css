/* 복합셀렉터 combinator */
/* 부모자식 조상 자손/후손  */


/* 후손셀렉터 */
/* 셀렉터A 셀렉터B div p*/

div p{
    color: red;
}

/* 자식 셀렉터 child combinator */
/* 셀렉터A > 셀렉터B */

div > p{
    color:black;

    /* 가장 나중에 적은 것이 우선된다, 순서도 적용,  */

}

span > p {
    color:brown;
}

/* 형제(동위) 셀렉터 sibling combinator */
/* 형제 관계에서 뒤에 위치하는 요소를 선택할 때 사용 */
/* 인접 형제 셀렉터 (셀렉터 A + 셀렉터 B) : 셀렉터 A의 형제 요소 중
셀렉터 A바로 뒤에 위치하는 셀렉터 B 요소를 선택 ,
A와 B사이에 다른 요소가 존재하면 선택되지 않는다.
*/
/* 일반 형제 셀렉터(셀렉터A ~ 셀렉터B): 셀렉터A의 형제 요소 중 뒤에 
위치하는 셀렉터 B의 요소를 모두 선택. */

/*인접 형제 셀렉터 (셀렉터 A + 셀렉터 B) */

p + ul {
    color: red;
}
/* 중간에 뭐가 껴들 수 없음 */

/* 일반형제 셀렉터 (셀렉터A ~ 셀렉터B) */

span ~ ul{
    color:green;
}

/* 가상 클래스 셀렉터 Pseudo-class selector */
/* 요소의 특정 상태에 따라 스타일을 정의할 때 사용 */
/* 특정상태란? 마우스가 올라와 있을 때, 링크를 방문했을 때와 아직 방문하지 않았을 때, 
포커스가 들어와 있을 때 */

a:hover {
    background-color: red;
}

input:focus {
    background-color:yellow;
}

/* 가상셀렉터가 있으면 크롤링이 어렵다. 못가져올수가 있음 */

/* 링크 셀렉터 */
/* :link 셀렉터가 방문하지 않은 링크일 때 
    :visited 셀렉터가 방문 링크일때
    :hover 셀렉터가 마우스가 올라와있을때
    :active 셀렉터가 클린된 상태일때
    :focus 셀렉터에 포커스가 들어와 있을때

    */

a:link{
    color:orange;
}

a:visited {
    color: green;
}

a:active{
    font-weight: bold;
}

input[type="text"]:focus{
    color: red;
}

input[type="password"]:focus{
    color:black;
}

/* 구조 가상 클래스 셀렉터*/
/* :first-child - 셀렉터에 해당하는 모든 요소 중 첫번쨰 자식인 요소를 선택 */
/* :last-child -
셀렉터에 해당하는 모든 요소 중마지막 요소를 선택 */

p:first-child {
    color: red;

}

p:last-child {
    color: blue;
}

/* :nth-child(n), :nth-last-child(n)*/
/* :nth-child(n) -셀렉터에 해당하는 모든 요소 중 뒤에서 n번쨰 자식인 요소를 선택 */
/* n은 0부터 시작 */

/* ol 요소의 자식인 요소인 li 요소 중에서 짝수 번째 요소만을 선택 */
ol > li:nth-child(2n) {
    color: orange;
}

/*olDML li 중에서 홀수번째 요소만 선택 */
ol > li:nth-last-child(2n+1) {
    color: green;
}

/* ol의 li중에서 첫번째 요소만 선택 */
ol > li:first-child {
    color: red;
}

/* ol의 li중에서 마지막 요소만 선택 */
ol > li:last-child {
    color: blue;
}

/* ol의 li중에서 4번째 요소만 선택 */
ol > li:nth-child(4) {
    background-color: brown;
}

/* ul의 모든 자식 요소 중에서 뒤에서부터 홀수 번째 요소만 선택 */
ul > :nth-last-child(2n+1) {
    color: red;
}

/* ul의 모든 자식요소중에서 뒤에서부터 짝수번째 요소만 선택 */
ul > :nth-last-child(2n) {
    color: blue;
}


/* p의 부모의 자식 중 첫번째 등장하는 p의 요소 선택 */

p:first-of-type {
    color: red;
}